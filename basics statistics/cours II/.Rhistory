setwd('~/Programming/Stepik/basics statistics/cours II')
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
data_for_predict <-read.csv("https://stepic.org/media/attachments/course/524/predict_passangers.csv")
str(test_data)
str(data_for_predict)
fit <- glm(is_prohibited ~ weight+ length+ width+ type, test_data, family='binomial')
fit
pred <-
names(data_for_predict)
data_for_predict[,!(names(data_for_predict)) == 'passangers']
pre <- predict(fit, pred)
str(pred)
pred
pred <- data_for_predict[!(names(data_for_predict)) == 'passangers']
pred
pre <- predict(fit, pred)
pre
data_for_predict
pre$max
max(pre)
data_for_predict['passangers',max(pre)]
data_for_predict['passangers',max(pre)]
data_for_predict[]
data_for_predict[5]
which.max(pre)
data_for_predict[5,which.max(pre)]
pre
max(pre)
which.max(pre)
class(pre)
tipeof(pre)
typeof(pre)
str(pre)
pre
which.max(pre)[2]
which.max(pre)
str(which.max(pre))
which.max(pre)[1]
which.max(pre)[1][1]
which.max(pre)[1,1]
which.max(pre)
which.max(pre)[1]
which.max(pre)[2]
which.max(pre)[3]
which.max(pre)[1:1]
which.max(pre)[1]
which.max(pre)
str(which.max(pre))
names(which.max(pre))
which.max(pre)*
*which.max(pre)
data_for_predict[5,which.max(pre)]
data_for_predict[5,]
data_for_predict[5]
data_for_predict[,5]
data_for_predict[which.max(pre),5]
data_for_predict[5]
data_for_predict[5,4]
data_for_predict[5]
data_for_predict[5][5]
data_for_predict[5][4]
data_for_predict[[4],5]
data_for_predict[5]
data_for_predict[,5]
data_for_predict[,5,4]
data_for_predict[4,5]
data_for_predict[which.max(pre),5]
pre
anova(pre)
anova(pre, test='Chisq')
an <- anova(fit, test="Chisq")
pre <- predict(an, pred)
data_for_predict
get_features <- function(dataset, data_for_predict){
fit <- glm(is_prohibited ~ weight+ length+ width+ type, dataset, family='binomial')
tested_data <- data_for_predict[!names(data_for_predict)=='passengers']
prediction <- predict(fit, tested_data)
retunr(data_for_predict[which.max(prediction),5])
}
get_features(test_data, data_for_predict)
get_features <- function(dataset, data_for_predict){
fit <- glm(is_prohibited ~ weight+ length+ width+ type, dataset, family='binomial')
tested_data <- data_for_predict[!names(data_for_predict)=='passengers']
prediction <- predict(fit, tested_data)
return(data_for_predict[which.max(prediction),5])
}
get_features(test_data, data_for_predict)
test <- read.csv("https://stepic.org/media/attachments/course/524/test.csv")
test
sapply(test, function(x) print x)
sapply(test, function(x) print(x))
lapply(test, function(x) print(x))
sapply(test, function(x) print(x))
ifelse(test, 1,2)
ifelse(test.is.numeric(), 1,2)
Filter(is.numeric, test)
shapiro.test(nums)
nums.sapply(print(x))
sapply(nums, shapiro.test)
nums <- Filter(is.numeric, test)
sapply(nums, shapiro.test)
sapply(nums, function (x) shapiro.test(x)$p.value)
normality_test <- function(dataset){
nums <- Filter(is.numeric, dataset)
res <- sapply(nums, function (x) shapiro.test(x)$p.value)
return (res)
}
normality_test
normality_test(test)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/s_anova_test.csv")
test_data
table(test_data)
library(dplyr)
summarise(group_by(test_data, x))
group_by(test_data, x)
group_by(test_data, x)
test_data
group_by(test_data, y)
anove(y~x,test_data)
anova(y~x,test_data)
anova(y~x,test_data, test='Chisq')
test_data$x~test_data$y
anova(x~y, test_data)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/s_anova_test.csv")
anova(x~y, test_data)
str(test_data)
anova(group_by(test_data, y),test="Chisq")
test_data[y=='A']
test_data[test_data$y=='A']
test_data2
test_data
test_data$y
test_data$y=='A'
test_data[,test_data$y=='A']
test_data[test_data$y=='A',]
anova(x~y,data=test_data)
str(test_data)
aov(x~y,data=test_data)
a <- aov(x~y,data=test_data)
summary(a)
a <- aov(x~y,data=test_data)
a
a <- aov(x~y,data=test_data)
a
summary(a)
subset(test_data$y=='A')
table(test_data)
group_by(table(test_data),A)
subset(test_data, y=='A')
library(reshape2)
dcast(test_data, symbol~y)
dcast(test_data, x~y)
A = test_data[test_data$y=='A',]
B = test_data[test_data$y=='B',]
C = test_data[test_data$y=='C',]
DF = data.frame(A,B,C)
DF
